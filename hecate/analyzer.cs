//initalizing log which was combined like this:
//word1:times
//word2:times
//....
//===============
//must use simplebt.py to generate a txt file which was generated by jieba
//2015.10.22 mythkast
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections;
namespace mythGraStepFour
{
	public class analyzer
	{
		private string mdir = string.Empty;
		private Dictionary<string,int> mdict;
		private List<string> list = null;
		public analyzer (string dir)
		{
			mdir = dir;
			mdict = new Dictionary<string, int> ();
			initalArray ();
		}
		private void initalArray(){
			list = new List<string> ();
			if (File.Exists (@"./filter.txt")) {
				var str = File.ReadAllText (@"./filter.txt");
				var splitstr = str.Split ('|');
				foreach (string s in splitstr) {
					list.Add (s);
				}
			}
		}
		private bool CheckArray(string str){
			foreach (string s in list) {
				if (s.Equals (str))
					return false;
			}
			return true;
		}
		private void SingleStep(string singledir){
			var dirs = Directory.GetFiles (singledir);
			foreach (string d in dirs) {
				if (Path.GetExtension (d).Equals (".txt")) {
					var lines = File.ReadLines (d);
					Dictionary<string,int> singledict = new Dictionary<string, int> ();
					foreach (string l in lines) {
						var splitstr = l.Split (',');
						if (splitstr.Length > 1) {
							int t = int.Parse (splitstr [0]);
							var valuesplit = splitstr [1].Split ('/');
							foreach (string s in valuesplit) {
								if (CheckArray(s)) {
									if (s.Length > 1) {
										if (mdict.ContainsKey (s)) {
											mdict [s] += t;
										} else {
											mdict [s] = t;
										}
										if (singledict.ContainsKey (s)) {
											singledict [s] += t;
										} else {
											singledict [s] = t;
										}
									}
								}
							}
						}
					}
					StartSort(singledict,singledir + "/single_append.log");
				}
			}
		}
		private void StartSort(Dictionary<string,int> dict,string filename){
			Console.WriteLine ("Sorting..." + filename);
			List<KeyValuePair<string,int>> mylist = new List<KeyValuePair<string, int>> (dict);
			mylist.Sort (delegate(KeyValuePair<string, int> x, KeyValuePair<string, int> y) {
				return y.Value.CompareTo (x.Value);
			});
			StreamWriter sw = new StreamWriter (filename);//"./" + mdir + "/append.txt");
			for (int i = 0; i < mylist.Count; i++) {
				sw.WriteLine (mylist [i].Key + ":" + mylist [i].Value);
				//Console.WriteLine (i.ToString() + ":" + mylist [i].Key + ":" + mylist [i].Value);
			}
			sw.Close ();
		}
		public void StartLoop(){
			if (mdir.Equals (string.Empty))
				return;
			var dirs = Directory.GetDirectories (mdir);
			foreach (string d in dirs) {
				SingleStep (d);
			}
			StartSort (mdict,mdir + "/append.txt");
		}
	}
}

